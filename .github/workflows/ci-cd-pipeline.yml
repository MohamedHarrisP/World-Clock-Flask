name: Code Scanning, Building Image, Image Scanning & Uploading Docker Image to ECR

on:
  push:
    branches:
      - main

jobs:
  sast:
    name: SAST with Semgrep
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep --config=p/security-audit \
                  --config=p/flask \
                  --config=p/python \
                  --severity=ERROR \
                  --json > semgrep_report.json

      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep_report.json

  sca:
    name: SCA with pip-audit
    runs-on: ubuntu-latest
    needs: sast
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run pip-audit SCA scan
        run: pip-audit --requirement requirements.txt --format json > pip-audit-report.json || true

      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  secrets-scan:
    name: Secrets Scan (Gitleaks)
    runs-on: ubuntu-latest
    needs: sca

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-format json --report-path gitleaks-report.json

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: secrets-report
          path: gitleaks-report.json

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: secrets-scan

    steps:
      - uses: actions/checkout@v3

      - uses: docker/setup-buildx-action@v3

      - run: docker build -t world-clock-flask:latest .

      - run: docker save world-clock-flask:latest -o image-world-clock.tar

      - uses: actions/upload-artifact@v4
        with:
          name: image-tar
          path: image-world-clock.tar

  scan-image:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tar
          path: .

      - run: docker load -i image-world-clock.tar

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: |
          trivy image --scanners vuln,secret,config \
          --severity CRITICAL,HIGH \
          --format json \
          --output trivy-report.json \
          world-clock-flask:latest

      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  upload-image:
    name: Upload Image to ECR
    needs: scan-image
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: image-tar
          path: .

      - run: docker load -i image-world-clock.tar

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        run: echo "IMAGE_TAG=1.0.${{ github.run_number }}" >> $GITHUB_ENV

      - run: docker tag world-clock-flask:latest ${{ steps.login-ecr.outputs.registry }}/public-portfolio/world-clock-flask:${{ env.IMAGE_TAG }}

      - run: docker push ${{ steps.login-ecr.outputs.registry }}/public-portfolio/world-clock-flask:${{ env.IMAGE_TAG }}
